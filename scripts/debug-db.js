const mongoose = require('mongoose');
require('dotenv').config({ path: '.env.local' });

async function debugConnection() {
  console.log('üîç DEBUG: MongoDB Connection Test');
  console.log('================================');
  
  // 1. Skontrolujte environment variables
  console.log('1. Environment Variables:');
  console.log('   MONGODB_URI exists:', !!process.env.MONGODB_URI);
  console.log('   MONGODB_URI length:', process.env.MONGODB_URI ? process.env.MONGODB_URI.length : 0);
  
  if (process.env.MONGODB_URI) {
    // Skryjeme heslo pre bezpeƒçnos≈•
    const maskedUri = process.env.MONGODB_URI.replace(/\/\/[^:]+:[^@]+@/, '//***:***@');
    console.log('   MONGODB_URI (masked):', maskedUri);
  }
  
  console.log('');
  
  // 2. Skontrolujte URI form√°t
  if (process.env.MONGODB_URI) {
    console.log('2. URI Analysis:');
    const uri = process.env.MONGODB_URI;
    
    // Extrahujte ƒçasti URI
    const usernameMatch = uri.match(/\/\/([^:]+):/);
    const hostMatch = uri.match(/@([^\/]+)\//);
    const dbMatch = uri.match(/\/\/([^\/]+)\/([^?]+)/);
    
    if (usernameMatch) {
      console.log('   Username:', usernameMatch[1]);
    }
    if (hostMatch) {
      console.log('   Host:', hostMatch[1]);
    }
    if (dbMatch) {
      console.log('   Database:', dbMatch[2]);
    }
  }
  
  console.log('');
  
  // 3. Pokus o pripojenie
  console.log('3. Connection Test:');
  
  if (!process.env.MONGODB_URI) {
    console.log('   ‚ùå MONGODB_URI nie je nastaven√©');
    return;
  }
  
  try {
    console.log('   üîå Pok√∫≈°am sa pripoji≈•...');
    
    // Nastavte timeout na 10 sek√∫nd
    await mongoose.connect(process.env.MONGODB_URI, {
      serverSelectionTimeoutMS: 10000,
      socketTimeoutMS: 10000,
    });
    
    console.log('   ‚úÖ √öspe≈°ne pripojen√©!');
    
    // Test datab√°zy
    const collections = await mongoose.connection.db.listCollections().toArray();
    console.log('   üìä Kolekcie v datab√°ze:', collections.length);
    
    // Test z√°pisu
    const testCollection = mongoose.connection.collection('debug_test');
    await testCollection.insertOne({ 
      test: true, 
      timestamp: new Date(),
      message: 'Connection test successful'
    });
    console.log('   ‚úçÔ∏è  Test z√°pisu √∫spe≈°n√Ω');
    
    // Vyƒçistite test d√°ta
    await testCollection.deleteOne({ test: true });
    console.log('   üóëÔ∏è  Test d√°ta vyƒçisten√©');
    
  } catch (error) {
    console.log('   ‚ùå Chyba pripojenia:', error.message);
    
    // Detailn√° anal√Ωza chyby
    if (error.message.includes('bad auth')) {
      console.log('   üí° Tip: Nespr√°vne pou≈æ√≠vateƒæsk√© meno alebo heslo');
      console.log('   üí° Tip: Skontrolujte, ƒçi je pou≈æ√≠vateƒæ vytvoren√Ω v MongoDB Atlas');
    } else if (error.message.includes('ENOTFOUND')) {
      console.log('   üí° Tip: Cluster URL nie je spr√°vne');
    } else if (error.message.includes('ECONNREFUSED')) {
      console.log('   üí° Tip: Network Access nie je povolen√©');
    } else if (error.message.includes('timeout')) {
      console.log('   üí° Tip: Pripojenie vypr≈°alo - skontrolujte internet');
    }
    
    console.log('   üîç Error details:', {
      name: error.name,
      code: error.code,
      message: error.message
    });
  } finally {
    if (mongoose.connection.readyState === 1) {
      await mongoose.disconnect();
      console.log('   üîå Odpojen√© od MongoDB');
    }
  }
  
  console.log('');
  console.log('================================');
  console.log('üîç DEBUG: Test dokonƒçen√Ω');
}

debugConnection(); 